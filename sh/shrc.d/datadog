# vim: set ft=sh :
# taken from https://github.com/DataDog/devops/wiki/Development-Environment#initial-setup

export HOMEBREW_NO_INSECURE_REDIRECT=1
export HOMEBREW_CASK_OPTS=--require-sha

# Asked by https://github.com/DataDog/devops/wiki/Frontend-Development-Environment
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"

export GOPATH="${HOME}/go"
export DATADOG_ROOT="${HOME}/Projects/datadog"

export PATH="$DATADOG_ROOT/devtools/bin:$PATH"
export VAGRANT_CWD="${DATADOG_ROOT}"


################################################################################
# return datadog apikey
# Globals:
#   None
# Arguments:
#   None
# Returns
#   None
################################################################################
function ddkey {
  case ${1:-staging} in
      prod )
          echo "$DD_API_KEY"
          ;;
      demo )
          echo "$DD_API_KEY_DEMO"
          ;;
      stage|staging )
          echo "$DD_API_KEY_STAGING"
          ;;
      *)
          echo "unkown environment ${1}"
          ;;
  esac
}

################################################################################
# return contextualized datadog application key
# Globals:
#   None
# Arguments:
#   None
# Returns
#   None
################################################################################
function ddapp {
  case ${1:-staging} in
      prod )
          echo "$DD_APP_KEY"
          ;;
      demo )
          echo "$DD_APP_KEY_DEMO"
          ;;
      stage|staging )
          echo "$DD_APP_KEY_STAGING"
          ;;
      *)
          echo "unkown environment ${1}"
          ;;
  esac
}

################################################################################
# returns the datadog api url params for current context
# Globals:
#   None
# Arguments:
#   None
# Returns
#   None
################################################################################
function ddparams {
    app="${1:-staging}"
    echo "api_key=$(ddkey $app)"'&application_key='"$(ddapp $app)"
}

################################################################################
# cd in datadog context
# Globals:
#   None
# Arguments:
#   None
# Returns
#   None
################################################################################
function cdd {
  cd "$DATADOG_ROOT"

  for var in "$@"
  do
      cd "$var"
  done
}

################################################################################
# write ts stats for given path
# Globals:
#   None
# Arguments:
#   None
# Returns
#   None
################################################################################
function ts_stats {
  project=${1:-$DATADOG_ROOT/web-ui/javascript/datadog}
  light=${2:-''}

  ts_or_tsx="$(find $project -name '*.ts' -or -name '*.tsx' |wc -l)"
  js_or_jsx="$(find $project -name '*.js' -or -name '*.jsx' |wc -l)"
  less="$(find $project -name '*.less' |wc -l)"
  markdown="$(find $project -name '*.markdown' -or -name '*.md' |wc -l)"
  jest_snapshots="$(find $project -name '*.snap' |wc -l)"
  total="$(find $project -type file |wc -l)"

  if [[ -n $light ]]
  then
      echo "migration to ts: $(bc<<<"scale=2;${ts_or_tsx}/(${js_or_jsx}+${ts_or_tsx})*100") %"
      return
  fi
  echo "tsx?: \t\t${ts_or_tsx}"
  echo "jsx?: \t\t${js_or_jsx}"
  echo "less: \t\t${less}"
  echo "markdown: \t${markdown}"
  echo "jest snapshots: ${jest_snapshots}"
  echo "======================"
  echo "total files: \t${total}"
  echo "migration to ts: $(bc<<<"scale=2;${ts_or_tsx}/(${js_or_jsx}+${ts_or_tsx})*100") %"
}


alias vaup="cdd; vagrant up --provider=virtualbox; cd -"
alias vadown='cdd; vagrant suspend; cd -'
alias vakill='killall VBoxHeadless'

alias cddd='cdd dogweb'
alias cdds='cdd web-ui'
alias cddjs='cdd web-ui/javascript/datadog'

alias bs='branches-status -u'
alias bsu='branches-status'

# Open gitlabâ€™s pipelines list for your current branch
alias gl="open \"${DD_GITLAB_URL}/DataDog/${PWD##*/}/commits/\$(git branch | grep \* | cut -d ' ' -f2)\""
# Open latest commit directly, so you open the correct pipeline directly
alias glc="open \"${DD_GITLAB_URL}/DataDog/${PWD##*/}/commit/\$(git rev-parse HEAD)/pipelines?ref=\$(git branch | grep \* | cut -d ' ' -f2)\""

# Start VM
# --------
#
# 1. upgrade to latest: `vagrant destroy -f && vagrant box prune --name datadog/dogbox && vagrant up --provider=virtualbox && vagrant ssh`
# 1. install project: `cd ~/dogweb && rake setup && dogbox database reset && dogbox database flush && rake upgrade_db && dogbox devmode enable dogweb`
# 1. start project `dogbox start core kafka`
