snippet log "Console log" !b
console.log(${0});
endsnippet

snippet it "mocha it" !b
it('${1:should}', (${2:done}) => {
  ${3}
});
endsnippet

snippet desc "mocha describe" !b
describe('${1}', () => {
  ${2}
});
endsnippet

snippet describe "mocha describe" !b
describe('${1}', () => {
  ${2}
});
endsnippet

snippet class "ES2015 class" b
class ${1:`!p snip.rv = snip.basename[0].upper() + snip.basename[1:]`} {
  $0
}
endsnippet

###########################################
# Snippets for React/redux/enzyme projects
###########################################

snippet esldl "eslint disable line"
// eslint-disable-line $0
endsnippet
snippet esldl "eslint disable next line" b
// eslint-disable-next-line $0
endsnippet

snippet esldnl "eslint disable next line" b
// eslint-disable-next-line $0
endsnippet

snippet Component "React component (PropTypes)" b
import React, { PropTypes, Component } from 'react';


const { func } = PropTypes;

/**
 * $1 component
 */
class ${1:`!p snip.rv = component_name(snip)`} extends Component {
  static propTypes = {};
  static defaultProps = {};

  /**
   * Render component
   * @return {ReactElement}
   */
  render() {
    return ${2:<p>Hello World</p>}$0;
  }
}

export default $1;
endsnippet

snippet Component "React component (flow)" b
/* @flow */
import React, { Component } from 'react';


type $1Props = {};

/**
 * $1 component
 */
class ${1:`!p snip.rv = component_name(snip)`} extends Component {
  static defaultProps = {};
  props: $1Props;

  /**
   * Render component
   * @return {ReactElement}
   */
  render() {
    return (
      ${2:<p>Hello World</p>}$0
    );
  }
}

export default $1;
endsnippet

snippet Route "React route (flow)" b
/* @flow */
import { compose, bindActionCreators } from 'redux';
import { asyncConnect } from 'gandi.react-async-connect';
import { withTranslator } from 'gandi.translate';
import { withBreadcrumb } from 'gandi.react-admin-layout';

import $1Presenter from './components/Presenter';


type $1Props = {};

const mapStateToProps = (state: State, ownProps: $1Props) => {
  return {
	$0
  };
};

const mapDispatchToProps = (dispatch: Dispatch) => bindActionCreators({
}, dispatch);

export default compose(
  withBreadcrumb(({ __, params }) => ({
    to: \`/\$\{params.id}\`,
    title: __('${2}'),
  })),
  withTranslator(),
  asyncConnect(mapStateToProps, mapDispatchToProps)
)(${1:`!p snip.rv = component_name(snip)`}Presenter);
endsnippet

snippet enzyme "Enzyme and mocha test case" b
import React from 'react';
import { expect } from 'chai';
import { ${1:mount} } from 'enzyme';

import `!p snip.rv = component_name(snip)` from '`!p snip.rv = subject_relative_path(snip, path)`';


describe('${2:`!p snip.rv = subject_fully_qualified_path(snip, path)`}', () => {
  ${0}
});
endsnippet

snippet itMount "Enzyme and mocha mount test" b
it('${1:should render}', () => {
  const wrapper = mount(<${2:`!p snip.rv = component_name(snip)`} ${3:props} />);

  expect(wrapper).to.${4:be.present()};
});
endsnippet

snippet itRender "Enzyme and mocha render test" b
it('${1:should render}', () => {
  const wrapper = render(<${2:`!p snip.rv = component_name(snip)`} ${3:props} />);

  expect(wrapper).to.${4:be.present()};
});
endsnippet

snippet itShallow "Enzyme and mocha shallow render test" b
it('${1:should render}', () => {
  const wrapper = shallow(<${2:`!p snip.rv = component_name(snip)`} ${3:props} />);

  expect(wrapper).to.${4:be.present()};
});
endsnippet

#################################################
# gandi.redux-fetcher snippets
#################################################

snippet descFetch "gandi.redux-fetcher test file" b
import { expect } from 'chai';
import { mockStore } from 'gandi.tests-helpers';
import {
  assert${1:Get}CallMatch, mockFetcherMiddleware,
} from 'gandi.redux-fetcher/dist/test';

// Test with logger?
import { createAppLogger } from 'gandi.redux-logger';
// Test notifications?
import { notifyDanger } from 'gandi.react-alerts';
import { assertAlertMatch } from 'gandi.react-alerts/dist/test';

import `!p snip.rv = subject_name(snip)` from '`!p snip.rv = subject_relative_path(snip, path)`';


describe('${2:`!p snip.rv = subject_fully_qualified_path(snip, path)`}', () => {
  ${0}
});
endsnippet

snippet itFetch "gandi.redux-fetcher middleware test case OK" b
it('${1:should fetch}', (done) => {
  const initialState = {};
  const responses = [
    [${2:200}, ${3:response}, { 'content-type': '${4:application/json}' }],
  ];

  const expectedActions = [
    assert${5:Get}CallMatch('${6:url}'),
  ];
  const store = mockStore(
    initialState,
    expectedActions,
    [mockFetcherMiddleware(responses)],
    done
  );
  store
    .dispatch(${7:`!p snip.rv = subject_name(snip)`}())
    .then(() => store.verify())
    .catch(done);
});
endsnippet

snippet itFetch "gandi.redux-fetcher middleware test case KO" b
it('${1:should reject}', (done) => {
  const initialState = {};
  const responses = [
    [${2:200}, ${3:response}, { 'content-type': '${4:application/json}' }],
  ];

  const expectedActions = [
    assert${5:Get}CallMatch('${6:url}'),
  ];
  const store = mockStore(
    initialState,
    expectedActions,
    [mockFetcherMiddleware(responses)],
    done
  );
  store
    .dispatch(${7:`!p snip.rv = subject_name(snip)`}())
    .then(() => done(new Error('The promise should have been rejected')))
    .catch(error => {
      expect(error).to.deep.equal(fetchError);
      store.verify();
    })
    .catch(done);
});
endsnippet


global !p
import re

def subject_name(snip):
  """
  return the subject name in test, function or component file
  """
  return snip.basename.replace('-test', '')

def component_name(snip):
  """
  return the component name in test or component file
  """
  subject = subject_name(snip)
  return subject[0].upper() + subject[1:]

def subject_relative_path(snip, path):
  """
  return the subject relative path from current file
  there is no magic, for now it only replaces __tests__ with ../
  """
  fullPath = re.sub(r"^.*__tests?__/?", '../', path)
  fullPath = re.sub(r"[^/]*\.js$", '', fullPath)
  fullPath = fullPath if len(fullPath) else './'
  return fullPath + subject_name(snip)

def subject_fully_qualified_path(snip, path):
  """
  return the subject path relative to src
  """
  fullPath = re.sub(r"__tests?__/?", '', path)
  fullPath = re.sub(r"^.*src/", '', fullPath)
  fullPath = re.sub(r"[^/]*\.js$", '', fullPath)
  fullPath = fullPath if len(fullPath) else './'
  return fullPath + subject_name(snip)

endglobal
